面向对象编程：
    三大特性；
    抽象类和接口；
    内部类和OOP实战；
对于描述复杂的事务，为了从宏观上把握，整体上合理分析，我们需要使用面向对象的思路来fenxi
整个系统。但是，具体到微观操作，仍然需要面向过程的思路去处理;

    以类的方式组织代码，以对象的组织封装数据；
    抽象：
        封装丶继承丶多态;
    值传递和引用传递的区别：

创建与初始化对象
    使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象，进行默认的初始化
    以及对类中构造器的调用；

    构造器有两个特性：
        1. 必须和类的名字相同
        2.必须没有返回类型，也不能写void
    构造器必须要掌握;
// 实例化初始值
1. 使用new关键字，必须要有构造器
2. 有参构造器;一旦定义了有参构造，要使用无参构造器，就需要进行显示的定义;
快捷键，当使用 alt+insert  ,快速生成有参构造;
构造器：
    1.和类名相同
    2.没有返回值
    常用：
    1.new 本质在使用构造器
    2.初始化对象的值
    注意点：
    1.定义有多构造之后，如果想使用无参构造,必须进行显示定义;

面向对象的内存分析：
    首先是进入到有main方法的函数，然后进行new的进行内存分配，实例化成一个对象，
    引用变量名-》 其他的引用变量名；
    然后静态方法去和类一起加载的;所有的对象都可以调用这个方法；

封装：(追求高内聚和低耦合)
    1.数据的隐藏
    2.属性私有，进行和去设置值和获取值：get/set
    优点：
        1. 提高程序的安全性，保护数据
        2. 隐藏代码的实现细节
        3. 统一接口
        4. 系统的可维护性增加
继承：(本质是对某一批类的抽象，从而实现对现实世界更好的建模)
    extands的意思是拓展。子类是父类的拓展
    java中类只有单继承，没有多继承；
    继承是类与类之间的一种关系。除此以外，雷和类之间的关系还有依赖丶组合丶聚合等；
    - object类
    - super
    - 方法的重写

    Ctrl + H： 打开所继承的类的逻辑关系;
    在java 中，所有的类都直接或者间接继承了Object类;
    java中只能有单继承，但是不能是多继承;

调用父类的构造器，必须是子类的第一行去调用;
- super();在构造方法的第一行去放置执行
super注意点：
    1.super调用父类的构造方法，必须在构造方法的第一个
    2.super必须只能出现在子类的方法或者构造方法中！
    3.super和this不能同时调用构造方法；

Vs this：
    代表的对象不同：
        this： 本身调用者这个对象
        super: 代表父类对象的应用
    前提：
        this: 没有继承也可以使用
        super：只能在继承调用后才可以使用
静态方法和非静态方法区别还是很大的;

重写:需要有继承关系，子类重写父类的方法；
    1.方法名必须相同
    2.参数列表必须相同
    3.修饰符：  范围可以扩大： public-> Protected->Defalut->private
    4.抛出的异常: 范围可以被缩小，但是不能进行扩大; classNotFoundException -> Exception

为什么需要进行重写：
    1.父类的功能，子类不一定需要，或者不一定满足；    Alt + Insert: override
    2.

多态：
    既同一方法可以根据发送对象的不同而采用多种不同的行为方式。
    注意事项：
    1. 多态是方法的多态，属性没有多态
    2.父类和子类，有联系 类型转换异常 ClassCastException
    3. 存在条件： 继承关系，方法要进行重写, 父类的引用指向子类的对象 Father f1 = new Son();

    1.static 方法，属于类，他不属于实例
    2.final 常量
    3.private 私有变量

instanceof 类型转换 引用类型转换,判断一个对象是什么类型！

抽象类：
    1.abstract的修饰的类
    2.抽象的类不能进行实例化
    3.抽象方法的类一定是抽象类，但是抽象类中也可以声明普通的方法;
    4.抽象的~ 抽象

    =================
    5.是否存在构造器?
    6.抽象类存在的意义? 把共有属性抽离出来，提高开发效率

接口：
    普通类：只有具体实现
    抽象类：具体实现和规范（抽象方法）都有！
    接口：只有规范，无法写方法~ 约束和实现分离~ 面向接口编程
    接口的本质是契约，就像是我们人间的法律一样。制定好后大家都遵守。
    OO的精髓，是对对象的抽离，最能体现这一点的就是接口。为什么我们讨论设计模式
    都只针对具体抽象能力的语言，就是因为设计模式研究的，实际上是如何
    合理的去抽象；
    接口关键词：  interface

接口的作用:
    1.约束
    2.定义一些方法，让不同的人实现~ 10 -> 1
    3.public abstract
    4.public static final
    5.接口不能被实例化~, 接口中没有构造方法
    6.implements可以实现多个接口
    7.必须要重写接口中的方法~

异常机制:
    1.什么事异常、
    2.异常体系
    3.异常处理机制
    4.处理异常
    5.自定义异常

Exception,例外
异常指程序运行中出现的不期而至的各种情况：文件不在
网咯出错，非法参数
简单分类：
    1.检查性异常
    2.运行时异常
    3.错误
异常处理框架；
    - 定义一个基类java.lang.Throwable作为所有异常的超类；
    - 在javaApi中已经有许多异常类，这些异常类分为两大类，错误Error和异常Exception
Error类对象由java虚拟机生成病抛出，大多数错误与
代码编写者所执行的操作无关;
java虚拟机运行错误,当JVM不再继续执行操作所需的内存资源时，
将出现OutofMemoryError.这些异常发生时，java虚拟机
一般会选择线程终止;