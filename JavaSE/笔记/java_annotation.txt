注解：
    什么是注解？
    不是程序本身，可以对程序作出解释；
    可以被其他程序（比如：编译器等）读取
@注释名，还可以添加一些参数;
在哪里可以使用？
    可以附加在package,class,method,field等上面，相当于给他们添加了额外的辅助信息，我们
    可以通过反射机制编程实现对这些元数据的访问;
内置注解：
    1.@Override:定义java.lang.Override中，此注释只适用于修饰方法，表示一个方法声明打算
    重写超类中的另一个方法声明;覆盖或者实现父类的方法;
    2.@Deprecated:定义java.lang.Deprecated中，此注释可以用于修辞方法，属性，类，表示不鼓励程序员适用这样
    的元素，通常是因为它很危险或者存在更好的选择;
    3.@SuppressWarnings:定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息
    与之前两个注释有所不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好了的
    @SuppressWarnings("all")
    @SuppressWarnings("unchecked")
    @SuppressWarnings(value={"unchecked","deprecation"})
    等等.....

元注解：
    负责解释其他注解的注解;
    @Target,用于描述注解的使用范围
    @Retention,表示需要什么级别保存该注释信息，用于描述注解的声明周期(SOURCE<CLASS<RUNTIME)
    @Documented,说明该注解将被包含在javadoc中
    @Inherited,说明子类可以继承父类中的该注解

自定义注解：
    使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口

public class Test03 {
    // 自定义注解, 如果没有默认值，我们就必须给注释
    @MyAnnotation2(name="王杰")
    public void test(){

    }
}

```
@Target({ElementType.TYPE,ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnnotation2{
    // 注解的参数： 参数类型 + 参数名();
    String name();
//  String name() default ""; // 自己设定默认值

}
```